{"version":3,"sources":["song.mp3","components/BirthdayMessage.js","data/BirthdayData.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Message","styled","div","Container","Wisher","BirthdayMessage","style","color","this","props","birthdayData","textColor","wishee","wisher","React","Component","App","document","body","background","BirthdayData","querySelector","innerText","href","substring","content","id","ref","myRef","src","song","controls","autoPlay","type","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","BirthdayConfetti","sizeMe","monitorHeight","monitorWidth","position","top","left","width","height","size","PureComponent","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"4GAAAA,EAAOC,QAAU,IAA0B,kC,08BCI3C,IAAMC,EAAUC,IAAOC,IAAV,KAWPC,EAAYF,IAAOC,IAAV,KASTE,EAASH,IAAOC,IAAV,KA4BGG,E,iLAbX,OACE,kBAACF,EAAD,KACE,kBAACH,EAAD,CAASM,MAAO,CAAEC,MAAOC,KAAKC,MAAMC,aAAaC,YAAjD,mBACmBH,KAAKC,MAAMC,aAAaE,OAD3C,KAGA,kBAACR,EAAD,CAAQE,MAAO,CAAEC,MAAOC,KAAKC,MAAMC,aAAaC,YAAhD,QACUH,KAAKC,MAAMC,aAAaG,a,GARZC,IAAMC,WCpCrB,GACbF,OAAQ,sBACRD,OAAQ,YACRL,MAAO,UACPI,UAAW,W,iBCwBEK,E,6LAtBXC,SAASC,KAAKZ,MAAMa,WAAaC,EAAab,MAC9CU,SAASI,cAAc,SAASC,UAAhC,0BAA+DF,EAAaR,OAA5E,KACAK,SAASI,cAAc,YAAYE,KAAnC,iCAAoEH,EAAab,MAAMiB,UAAU,GAAjG,YAAuGJ,EAAab,MAAMiB,UAAU,IACpIP,SAASI,cAAc,gBAAgBI,QAAUL,EAAab,Q,+BAK9D,OAEE,6BAEE,kBAAC,EAAD,CAAiBG,aAAcU,IAC/B,6BACA,2BAAOM,GAAG,QAAQC,IAAKnB,KAAKoB,MAAOC,IAAKC,IAAMC,UAAQ,EAACC,UAAQ,EAACC,KAAK,mB,GAhB3DnB,IAAMC,WCOJmB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,sCCTNC,IAASC,OAAO,kBAAC,EAAD,MAASvB,SAASwB,eAAe,SAEjD,IAAMC,EAAmBC,IAAO,CAC9BC,eAAe,EACfC,cAAc,GAFSF,CAAA,iLAWrB,OACE,yBAAKrC,MAAO,CAAEwC,SAAU,WAAYC,IAAK,EAAGC,KAAM,EAAGC,MAAO,OAAQC,OAAQ,SAC1E,kBAAC,IAAa1C,KAAKC,MAAM0C,WAbR,GAGSrC,IAAMsC,gBAgBxCb,IAASC,OAAO,kBAAC,EAAD,MAAsBvB,SAASwB,eAAe,QDmGxD,kBAAmBY,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.c0fb06b8.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/song.60d8aba6.mp3\";","\nimport React from 'react'\nimport styled from 'styled-components'\n\nconst Message = styled.div`\n  white-space: nowrap;\n  font-family: 'Roboto', sans-serif;\n  font-weight: 500;\n  font-size: 4rem;\n  @media screen and (max-width: 900px) {\n    white-space: default;\n    font-size: 1.5rem;\n  }\n`\n\nconst Container = styled.div`\n  text-align: center;\n  margin: 0;\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n`\n\nconst Wisher = styled.div`\n  display: block;\n  white-space: nowrap;\n  font-family: 'Roboto', sans-serif;\n  font-weight: 500;\n  font-size: 2rem;  \n  margin-top: 1rem;\n  @media screen and (max-width: 900px) {\n    font-size: 1.5rem;\n    white-space: default;\n  }\n`\n\nclass BirthdayMessage extends React.Component {\n  render() {\n    return (\n      <Container>\n        <Message style={{ color: this.props.birthdayData.textColor }}>\n          Happy Birthday, {this.props.birthdayData.wishee}!\n        </Message>\n        <Wisher style={{ color: this.props.birthdayData.textColor }}>\n          -&nbsp;{this.props.birthdayData.wisher}\n        </Wisher>\n      </Container>\n    )\n  }\n}\n\nexport default BirthdayMessage","\nexport default {\n  wisher: 'Karthick Selvendran',\n  wishee: 'Durga Mam',\n  color: '#2977f5',\n  textColor: '#E8EAEC',\n}","import React from 'react'\nimport BirthdayMessage from './components/BirthdayMessage'\nimport BirthdayData from './data/BirthdayData'\nimport song from './song.mp3'\n\nclass App extends React.Component {\n  componentWillMount() {\n    document.body.style.background = BirthdayData.color\n    document.querySelector('title').innerText = `Happy Birthday, ${BirthdayData.wishee}!`\n    document.querySelector('.favicon').href = `//dummyimage.com/64x64/${BirthdayData.color.substring(1)}/${BirthdayData.color.substring(1)}`\n    document.querySelector('.theme-color').content = BirthdayData.color\n  }\n\n  render() {\n\n    return (\n\n      <div>\n\n        <BirthdayMessage birthdayData={BirthdayData} />\n        <br />\n        <audio id=\"audio\" ref={this.myRef} src={song} controls autoPlay type=\"audio/mp3\" />\n\n      </div>\n\n    )\n  }\n}\n\nexport default App","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport sizeMe from 'react-sizeme'\nimport Confetti from 'react-confetti'\nimport PropTypes from 'prop-types'\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nconst BirthdayConfetti = sizeMe({\n  monitorHeight: true,\n  monitorWidth: true,\n})(class BirthdayConfetti extends React.PureComponent {\n  static propTypes = {\n    size: PropTypes.shape({\n      width: PropTypes.number,\n      height: PropTypes.number,\n    }),\n  }\n  render() {\n    return (\n      <div style={{ position: 'absolute', top: 0, left: 0, width: '100%', height: '100%' }}>\n        <Confetti {...this.props.size} />\n      </div>\n    )\n  }\n})\n\nReactDOM.render(<BirthdayConfetti />, document.getElementById('app'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}